// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.0
// source: gsm.proto

package gsm

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoPassSecretsManagerClient is the client API for GoPassSecretsManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoPassSecretsManagerClient interface {
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (GoPassSecretsManager_SyncClient, error)
}

type goPassSecretsManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewGoPassSecretsManagerClient(cc grpc.ClientConnInterface) GoPassSecretsManagerClient {
	return &goPassSecretsManagerClient{cc}
}

func (c *goPassSecretsManagerClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (GoPassSecretsManager_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &GoPassSecretsManager_ServiceDesc.Streams[0], "/gsm.GoPassSecretsManager/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &goPassSecretsManagerSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GoPassSecretsManager_SyncClient interface {
	Recv() (*SyncResponse, error)
	grpc.ClientStream
}

type goPassSecretsManagerSyncClient struct {
	grpc.ClientStream
}

func (x *goPassSecretsManagerSyncClient) Recv() (*SyncResponse, error) {
	m := new(SyncResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GoPassSecretsManagerServer is the server API for GoPassSecretsManager service.
// All implementations must embed UnimplementedGoPassSecretsManagerServer
// for forward compatibility
type GoPassSecretsManagerServer interface {
	Sync(*SyncRequest, GoPassSecretsManager_SyncServer) error
	mustEmbedUnimplementedGoPassSecretsManagerServer()
}

// UnimplementedGoPassSecretsManagerServer must be embedded to have forward compatible implementations.
type UnimplementedGoPassSecretsManagerServer struct {
}

func (UnimplementedGoPassSecretsManagerServer) Sync(*SyncRequest, GoPassSecretsManager_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedGoPassSecretsManagerServer) mustEmbedUnimplementedGoPassSecretsManagerServer() {}

// UnsafeGoPassSecretsManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoPassSecretsManagerServer will
// result in compilation errors.
type UnsafeGoPassSecretsManagerServer interface {
	mustEmbedUnimplementedGoPassSecretsManagerServer()
}

func RegisterGoPassSecretsManagerServer(s grpc.ServiceRegistrar, srv GoPassSecretsManagerServer) {
	s.RegisterService(&GoPassSecretsManager_ServiceDesc, srv)
}

func _GoPassSecretsManager_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoPassSecretsManagerServer).Sync(m, &goPassSecretsManagerSyncServer{stream})
}

type GoPassSecretsManager_SyncServer interface {
	Send(*SyncResponse) error
	grpc.ServerStream
}

type goPassSecretsManagerSyncServer struct {
	grpc.ServerStream
}

func (x *goPassSecretsManagerSyncServer) Send(m *SyncResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GoPassSecretsManager_ServiceDesc is the grpc.ServiceDesc for GoPassSecretsManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoPassSecretsManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gsm.GoPassSecretsManager",
	HandlerType: (*GoPassSecretsManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _GoPassSecretsManager_Sync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gsm.proto",
}

// GoPassSecretsManagerWebhookClient is the client API for GoPassSecretsManagerWebhook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoPassSecretsManagerWebhookClient interface {
	Webhook(ctx context.Context, in *WebhookRequest, opts ...grpc.CallOption) (GoPassSecretsManagerWebhook_WebhookClient, error)
}

type goPassSecretsManagerWebhookClient struct {
	cc grpc.ClientConnInterface
}

func NewGoPassSecretsManagerWebhookClient(cc grpc.ClientConnInterface) GoPassSecretsManagerWebhookClient {
	return &goPassSecretsManagerWebhookClient{cc}
}

func (c *goPassSecretsManagerWebhookClient) Webhook(ctx context.Context, in *WebhookRequest, opts ...grpc.CallOption) (GoPassSecretsManagerWebhook_WebhookClient, error) {
	stream, err := c.cc.NewStream(ctx, &GoPassSecretsManagerWebhook_ServiceDesc.Streams[0], "/gsm.GoPassSecretsManagerWebhook/Webhook", opts...)
	if err != nil {
		return nil, err
	}
	x := &goPassSecretsManagerWebhookWebhookClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GoPassSecretsManagerWebhook_WebhookClient interface {
	Recv() (*WebhookResponse, error)
	grpc.ClientStream
}

type goPassSecretsManagerWebhookWebhookClient struct {
	grpc.ClientStream
}

func (x *goPassSecretsManagerWebhookWebhookClient) Recv() (*WebhookResponse, error) {
	m := new(WebhookResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GoPassSecretsManagerWebhookServer is the server API for GoPassSecretsManagerWebhook service.
// All implementations must embed UnimplementedGoPassSecretsManagerWebhookServer
// for forward compatibility
type GoPassSecretsManagerWebhookServer interface {
	Webhook(*WebhookRequest, GoPassSecretsManagerWebhook_WebhookServer) error
	mustEmbedUnimplementedGoPassSecretsManagerWebhookServer()
}

// UnimplementedGoPassSecretsManagerWebhookServer must be embedded to have forward compatible implementations.
type UnimplementedGoPassSecretsManagerWebhookServer struct {
}

func (UnimplementedGoPassSecretsManagerWebhookServer) Webhook(*WebhookRequest, GoPassSecretsManagerWebhook_WebhookServer) error {
	return status.Errorf(codes.Unimplemented, "method Webhook not implemented")
}
func (UnimplementedGoPassSecretsManagerWebhookServer) mustEmbedUnimplementedGoPassSecretsManagerWebhookServer() {
}

// UnsafeGoPassSecretsManagerWebhookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoPassSecretsManagerWebhookServer will
// result in compilation errors.
type UnsafeGoPassSecretsManagerWebhookServer interface {
	mustEmbedUnimplementedGoPassSecretsManagerWebhookServer()
}

func RegisterGoPassSecretsManagerWebhookServer(s grpc.ServiceRegistrar, srv GoPassSecretsManagerWebhookServer) {
	s.RegisterService(&GoPassSecretsManagerWebhook_ServiceDesc, srv)
}

func _GoPassSecretsManagerWebhook_Webhook_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WebhookRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoPassSecretsManagerWebhookServer).Webhook(m, &goPassSecretsManagerWebhookWebhookServer{stream})
}

type GoPassSecretsManagerWebhook_WebhookServer interface {
	Send(*WebhookResponse) error
	grpc.ServerStream
}

type goPassSecretsManagerWebhookWebhookServer struct {
	grpc.ServerStream
}

func (x *goPassSecretsManagerWebhookWebhookServer) Send(m *WebhookResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GoPassSecretsManagerWebhook_ServiceDesc is the grpc.ServiceDesc for GoPassSecretsManagerWebhook service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoPassSecretsManagerWebhook_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gsm.GoPassSecretsManagerWebhook",
	HandlerType: (*GoPassSecretsManagerWebhookServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Webhook",
			Handler:       _GoPassSecretsManagerWebhook_Webhook_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gsm.proto",
}
